<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Concurrency - Introduction</title>
      <link href="/2018/05/14/Java-Concurrency-Introduction/"/>
      <url>/2018/05/14/Java-Concurrency-Introduction/</url>
      <content type="html"><![CDATA[<p>Java并发编写是每个Java程序员都必须掌握的高级特性，可以说一个Java程序员是否有多线程编程经验，经验的多少复杂性决定了其项目的高度。本章内容将会以翻译Java官方Concurrency Tutorials的形式，结合部分源码类的分析，旨在以开发者的角度解读并发Api如何使用，同时尽可能多的了解其内部实现原理。<br><a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html" target="_blank" rel="noopener">原文地址</a></p><p>计算机用户想当然地认为他们的系统一次可以做不止一件事。他们假设他们可以一边进行文字处理工作，与此同时还有其他应用程序正在下载文件，管理打印队列，播放音频流。甚至常常期望一个应用程序一次做不止一件事。例如，音频播放应用程序必须同时读取网络上的数字音频，解压它，管理播放进度，并更新进度显示。又比如文字处理程序不管更新文档的格式和刷新界面有多频繁，也必须同时响应键盘和鼠标的事件，可以做这些事情的软件被称为并发软件。Java平台从一开始就可以使用基础并发库支持并发编程，到了Java5的时代更是加入了高并发Apis，之后的文章中会对一些Java平台<code>java.util.concurrent</code>包下的基础并发和一些高并发Api进行介绍。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Concurrency </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Framework - Iterable</title>
      <link href="/2018/05/14/Java-Collection-Framework-Iterable/"/>
      <url>/2018/05/14/Java-Collection-Framework-Iterable/</url>
      <content type="html"><![CDATA[<p>这个接口是所有collection框架的基础接口，先看接口定义：</p><p>Implementing this interface allows an object to be the target of the “for-each loop” statement. See For-each Loop.</p><p>首先这是一个规范性的接口，当程序员对象或者collection可以运用for-each方式遍历的时候需要实现这个接口.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;T&gt; iterator(); 返回foreach语句提供的迭代器</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Collection Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Collection Framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Framework - ListIterator</title>
      <link href="/2018/05/14/Java-Collection-Framework-ListIterator/"/>
      <url>/2018/05/14/Java-Collection-Framework-ListIterator/</url>
      <content type="html"><![CDATA[<p>先看接口文档定义</p><p>An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator’s current position in the list. A ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next(). An iterator for a list of length n has n+1 possible cursor positions, as illustrated by the carets (*) below:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor positions: * Element(0) * Element(1) * Element(2)   ... * Element(n-1) *</span><br></pre></td></tr></table></figure></p><p>Note that the remove() and set(Object) methods are not defined in terms of the cursor position; they are defined to operate on the last element returned by a call to next() or previous().<br>This interface is a member of the Java Collections Framework.</p><p>从文档看这个一个专门为lists设计的迭代器，让开发人员可以从不同方向上在迭代过程中修改列表元素，并且获取当前元素下标。<strong>ListIterator中没有记录当前element</strong>，ListIterator当前的游标的位置总是在调用previous() 获得的元素和调用next()所获得的元素之间。一个长为n的list迭代器包含有n+1个可能的游标位置，像图示中*表示的那样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">游标位置: * 元素(0) * 元素(1) * 元素(2)   ... * 元素(n-1) *</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong> remove()方法和set(Object)方法操作的元素并没有参考游标位置，而是作用于最后一次调用next() 或者 previous()方法返回的元素上。<br>这个接口是Java集合框架的一部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void add(E e)</span><br><span class="line">插入对应的元素E（这不是一个稳定操作不是必须实现的方法）</span><br><span class="line">boolean hasNext()</span><br><span class="line">如果当前list迭代器往前的方向上有元素的则返回true反之返回false</span><br><span class="line">boolean hasPrevious()</span><br><span class="line">如果当前list迭代器往后的方向上有元素的则返回true反之返回false</span><br><span class="line">E next()</span><br><span class="line">返回列表中的下一个元素并且把游标位置前进一位</span><br><span class="line">int nextIndex()</span><br><span class="line">返回下一次next()方法获取的元素的下标</span><br><span class="line">E previous()</span><br><span class="line">返回列表中的上一个元素并且把游标位置回退一位</span><br><span class="line">int previousIndex()</span><br><span class="line">返回下一次previous()方法获取的元素的下标</span><br><span class="line">void remove()</span><br><span class="line">从列表中删除最近一次调用next()或者previous()方法返回的元素（这不是一个稳定操作不是必须实现的方法）</span><br><span class="line">void set(E e)</span><br><span class="line">用e来替换列表中最近一次调用next()或者previous()方法返回的元素（这不是一个稳定操作不是必须实现的方法）</span><br></pre></td></tr></table></figure><p>值得注意的是文档方法中有标注了<strong>optional operation</strong>属性，表示的是这个接口不是必须去实现的，例如在某些只读的集合(read-only collection)中，标注了<strong>optional operation</strong>的方法不但起不到作用并且会抛出一个UnsupportedOperationException，类似集合可以尝试通过Collections.unmodifiableSet()方法获取。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Collection Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Collection Framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Framework - Iterator</title>
      <link href="/2018/05/14/Java-Collection-Framework-Iterator/"/>
      <url>/2018/05/14/Java-Collection-Framework-Iterator/</url>
      <content type="html"><![CDATA[<p>先看接口文档定义</p><ul><li><p>An iterator over a collection. Iterator takes the place of<br>Enumeration in the Java Collections Framework.  Iterators<br>differ from enumerations in two ways:</p><ul><li>Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.</li><li>Method names have been improved.</li></ul><p>This interface is a member of the Java Collections Framework.</p></li></ul><p>大致意思呢就是这个接口用于java collection的遍历，并且Iterator用来替换曾经的Enumeration这个接口的，有以下俩个不同点，一个是Iterators允许调用者在遍历Collection的时候运用正确的语法去删除元素。第二个是方法名有所优化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boolean hasNext(); 当次遍历是否还有更多的元素</span><br><span class="line">E next(); 获取下一个遍历元素  </span><br><span class="line">void remove(); 删除当前基础集合最近的一个元素，remove方法只能在调用next方法后使用且只能</span><br><span class="line">调用一次，所有不使用remove方法去修改基础集合的方法都会导致集合的状态不确定</span><br></pre></td></tr></table></figure><p>Java Collections Framework中的所有数据结构都直接或间接的实现了Iterator这个接口，在使用时可以直接调用list.iterator方法获取对应的遍历器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = list.iterator();</span><br><span class="line">while (iterator.hasNext())&#123;</span><br><span class="line">   System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Collection Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Collection Framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Framework - Outline</title>
      <link href="/2018/05/14/Java-Collection-Framework-Outline/"/>
      <url>/2018/05/14/Java-Collection-Framework-Outline/</url>
      <content type="html"><![CDATA[<p>这是一篇oracle官方对Java集合框架的大纲的翻译，<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/reference.html" target="_blank" rel="noopener">点击可查看原文</a></p><p>具体的思维导图已经在<a href="/2018/05/14/Java-Collection-Framework-Introduction/" title="简介">简介</a>中给出了。</p><p>以下为翻译：</p><p>集合框架大纲<br>集合框架主要包含：</p><h4 id="集合接口"><a href="#集合接口" class="headerlink" title="集合接口"></a>集合接口</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html" target="_blank" rel="noopener">Collection</a> 一组对象的集合.没有规定集合的有序也没有规定是否可以包含相同的元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" target="_blank" rel="noopener">Set</a> 就是广义上的集合，规定了不能包含相同的元素，继承自Collection接口，有序和没序都有可能。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="noopener">List</a> 继承自Collection接口，有序的集合或者说是一连串数据集合. 允许元素重复，允许通过元素下标索引。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html" target="_blank" rel="noopener">Queue</a> 用于存放等待处理流程前的数据的容器，除了基础的Collection接口方法外，queues提供了额外的插入，提取和检查等操作。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html" target="_blank" rel="noopener">Deque</a> 一个双端队列继承自Queue接口，支持从任意一端的插入和删除操作。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" target="_blank" rel="noopener">Map</a> 一种键和值的数据映射结构，每个键都对应唯一的值。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html" target="_blank" rel="noopener">SortedSet</a> 继承自Set接口，一个元素自动排序的Set集合，排序方式使用自然顺序或创建SortedSet实例时提供Comparator对象。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html" target="_blank" rel="noopener">SortedMap</a> 继承自Map接口，一个通过key自动排序的Map结构，排序方式使用自然顺序或创建SortedMap实例时提供Comparator对象。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/NavigableSet.html" target="_blank" rel="noopener">NavigableSet</a> 在一个SortedSet上添加了一个为搜索目标获取最接近的匹配项的方法。可以升序或降序的访问遍历整个NavigableSet。 </li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/NavigableMap.html" target="_blank" rel="noopener">NavigableMap</a> 在一个SortedMap上添加了一个为搜索目标获取最接近的匹配项的方法。可以升序或降序的访问遍历整个NavigableMap。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html" target="_blank" rel="noopener">BlockingQueue</a> 扩展Queue接口，当队列为空时获取队列元素会发生阻塞，当队列为满时添加队列元素会发生阻塞。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html" target="_blank" rel="noopener">TransferQueue</a> 扩展BlockingQueue接口，生产者会一直阻塞直到所添加到队列的元素被某一个消费者所消费。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html" target="_blank" rel="noopener">BlockingDeque</a> 扩展Deque，BlockingQueue接口，当双向队列为空时获取队列元素会发生阻塞，当双向队列为满时添加队列元素会发生阻塞。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html" target="_blank" rel="noopener">ConcurrentMap</a> 一个添加了原子性的putIfAbsent，remove, replace操作的Map。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html" target="_blank" rel="noopener">ConcurrentNavigableMap</a> 集合了ConcurrentMap和NavigableMap的特性。</li></ul><h4 id="多用途接口实现"><a href="#多用途接口实现" class="headerlink" title="多用途接口实现"></a>多用途接口实现</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html" target="_blank" rel="noopener">HashSet</a> 用哈希表扩展Set接口的实现，最全面的Set接口实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html" target="_blank" rel="noopener">TreeSet</a> NavigableSet的红黑树实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html" target="_blank" rel="noopener">LinkedHashSet</a> Set接口的链表和哈希表实现，一个和HashSet效率相似的有序输入Set实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html" target="_blank" rel="noopener">ArrayList</a> 一个实现了list接口(不同步的Vector)可重新规划大小的数组。list接口最佳实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html" target="_blank" rel="noopener">ArrayDeque</a> 高效切可重新规划大小的Deque接口的数组实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html" target="_blank" rel="noopener">LinkedList</a> 双重链表实现List接口，对比ArrayList的LinkedList的实现再处理频繁元素插入和删除操作时效率更高，同时实现了Deque接口，当通过Queue使用时，LinkedList表现为一个FIFO队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html" target="_blank" rel="noopener">PriorityQueue</a> 无界优先级队列的堆实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html" target="_blank" rel="noopener">HashMap</a> Map接口的哈希表实现(一个支持null键值的非线程同步的Hashtable)Map接口的最佳实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html" target="_blank" rel="noopener">TreeMap</a> NavigableMap接口的红黑树实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html" target="_blank" rel="noopener">LinkedHashMap</a> Map接口的哈希表和双重链表实现。一个效率和HashMap类似的输入有序的Map实现。在实在缓存功能这种数据结构是很有用。</li></ul><h4 id="包装实现类"><a href="#包装实现类" class="headerlink" title="包装实现类"></a>包装实现类</h4><p>对某些集合的实现增加一些功能特性，完全是通过静态工厂方法创建</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableCollection-java.util.Collection-" target="_blank" rel="noopener">Collections.unmodifiableInterface</a> 返回一个当前集合的不可修改的集合，如果用户想要修改集合内元素就会抛出一个UnsupportedOperationException。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedCollection-java.util.Collection-" target="_blank" rel="noopener">Collections.synchronizedInterface</a> 返回一个依赖当前非线程同步集合的线程同步的集合。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-" target="_blank" rel="noopener">Collections.checkedInterface</a> 返回一个对应动态类型检测的集合，如果客户端想要添加一个错误类型的type会抛出一个ClassCastException异常，一般的程序都会提供语言层的静态类型检测，不过这种静态类型的检测是可以绕开的，而动态的类型检测消除了这种危险性。 </li></ul><h4 id="适配器接口实现"><a href="#适配器接口实现" class="headerlink" title="适配器接口实现"></a>适配器接口实现</h4><p>适配一个集合的实现到另一个实现。</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#newSetFromMap-java.util.Map-" target="_blank" rel="noopener">newSetFromMap(Map)</a> 从一个通用Map实现创建一个通用的Set实现</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#asLifoQueue-java.util.Deque-" target="_blank" rel="noopener">asLifoQueue(Deque)</a> 返回一个Deque单具有后入先出队列的实现</li></ul><h4 id="便捷实现"><a href="#便捷实现" class="headerlink" title="便捷实现"></a>便捷实现</h4><p>集合接口的高性能的便捷实现。</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-" target="_blank" rel="noopener">Arrays.asList</a> 让一个数组具有list的实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptySet--" target="_blank" rel="noopener">emptySet</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyList--" target="_blank" rel="noopener">emptyList</a> 和 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyMap--" target="_blank" rel="noopener">emptyMap</a> 返回一个永远不变的空Set，空List或空Map。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singleton-java.lang.Object-" target="_blank" rel="noopener">singleton</a>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singletonList-java.lang.Object-" target="_blank" rel="noopener">singletonList</a> 和 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singletonMap-K-V-" target="_blank" rel="noopener">singletonMap</a> 返回一个永远不变的单例的 set, list, 或map，只包含特定的对象(或者键-值)。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#nCopies-int-T-" target="_blank" rel="noopener">nCopies</a> 返回一个永远不变list包含N个指定对象的拷贝。</li></ul><h4 id="遗留实现"><a href="#遗留实现" class="headerlink" title="遗留实现"></a>遗留实现</h4><p>老的集合类翻新成被新的实现</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html" target="_blank" rel="noopener">Vector</a> List接口的线程同步和可重新拓展大小数组的实现，包含了遗留的一些方法。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html" target="_blank" rel="noopener">Hashtable</a> Map接口的线程同步的的哈希表实现，不允许null的键或值，包含了遗留的一些方法。</li></ul><h4 id="特殊目的实现"><a href="#特殊目的实现" class="headerlink" title="特殊目的实现"></a>特殊目的实现</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html" target="_blank" rel="noopener">WeakHashMap</a> 一个只储存键的虚引用的Map实现，只存储键的虚引用让java垃圾收集器可以回收那些在WeakHashMap外部不再有引用的键值对。这是类是对虚引用特性最简单的运用，它对于实现注册表类似的数据结构非常有用，因为当一个条目的键不再被任何线程访问时，它的键就可以被消除了。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/IdentityHashMap.html" target="_blank" rel="noopener">IdentityHashMap</a> 基于哈希表的身份Map，这个类在用于对象拓扑图的转换时很有用(类似序列化或深拷贝)要执行这些转换，您必须维护一个基于身份的“节点表”，它跟踪哪些对象已经被看到了。IdentityHashMap也被用于维护对象的元信息映射动态调试器和其他类似系统中。最后IdentityHashMap在防止蓄意欺骗equal()造成的“欺骗攻击”方面很有用(IdentityHashMap从不对内部的key调用equal()方法)，还有一个额外的好处这个实现执行效率很高。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html" target="_blank" rel="noopener">CopyOnWriteArrayList</a> 一个copy-on-write数组的列表实现，所有的修改操作（如添加、设置、删除）都是通过生成一个新的数组复制来实现。不需要线程同步，即使是在迭代中迭代器也绝不会抛出ConcurrentModificationException。此实现非常适合维护事件处理列表（其中更改很少，遍历频繁且可能耗时）。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html" target="_blank" rel="noopener">CopyOnWriteArraySet</a> 基于copy-on-write数组的Set实现，这个实现和CopyOnWriteArrayList类似，与大多数set实现不同的是，添加、删除和包含方法需要时间与集合的大小成比例。此实现非常适合维护必须防止重复的事件处理列表。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html" target="_blank" rel="noopener">EnumSet</a> 一种基于Bit Vector的高性能集合实现，每一个EnumSet实例的所有元素都必须是一个枚举类型。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumMap.html" target="_blank" rel="noopener">EnumMap</a> 一种基于数组的高性能Map实现，每一个EnumMap实例的所有键必须是一个枚举类型。</li></ul><h4 id="并行实现"><a href="#并行实现" class="headerlink" title="并行实现"></a>并行实现</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html" target="_blank" rel="noopener">ConcurrentLinkedQueue</a> 基于链接节点的无边界先入先出队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html" target="_blank" rel="noopener">LinkedBlockingQueue</a> 一个可选的基于链接节点的有界FIFO阻塞队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html" target="_blank" rel="noopener">ArrayBlockingQueue</a> 基于数组的有界FIFO阻塞队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html" target="_blank" rel="noopener">PriorityBlockingQueue</a> 基于优先级堆的无界阻塞优先级队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html" target="_blank" rel="noopener">DelayQueue</a> 基于优先级堆的时间调度队列。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html" target="_blank" rel="noopener">SynchronousQueue</a> 一个简单的会合机制BlockingQueue接口实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html" target="_blank" rel="noopener">LinkedBlockingDeque</a> 一个可选的基于链接节点的有界FIFO阻塞双向队列实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html" target="_blank" rel="noopener">LinkedTransferQueue</a> 一个基于链接节点的无界TransferQueue实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html" target="_blank" rel="noopener">ConcurrentHashMap</a> 一个基于哈希表的高性能并发并且高性能的ConcurrentMap实现，此实现在执行检索时不会阻塞，并且允许客户端选择更新的并发级别。ConcurrentHashMap被考虑为Hashtable的一个简单代替品，除了实现ConcurrentMap功能以外，它还支持所有哈希表的传统方法。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html" target="_blank" rel="noopener">ConcurrentSkipListSet</a> NavigableSet接口的跳跃表实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html" target="_blank" rel="noopener">ConcurrentSkipListMap</a> ConcurrentNavigableMap接口的跳跃表实现。</li></ul><h4 id="抽象实现"><a href="#抽象实现" class="headerlink" title="抽象实现"></a>抽象实现</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html" target="_blank" rel="noopener">AbstractCollection</a> 抽象Collection实现表示既不是Set也不是List(类似一个bag或者multiset)。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html" target="_blank" rel="noopener">AbstractSet</a> 抽象Set实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html" target="_blank" rel="noopener">AbstractList</a> 基于随机访问数据存储（如array）的抽象List实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSequentialList.html" target="_blank" rel="noopener">AbstractSequentialList</a> 基于顺序访问数据存储（如链表）的抽象List实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractQueue.html" target="_blank" rel="noopener">AbstractQueue</a> 抽象Queue实现。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html" target="_blank" rel="noopener">AbstractMap</a> 抽象Map实现。</li></ul><h4 id="算法-Collections"><a href="#算法-Collections" class="headerlink" title="算法 Collections"></a>算法 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html" target="_blank" rel="noopener">Collections</a></h4><p>类包含这些有用的静态方法。</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#sort-java.util.List-" target="_blank" rel="noopener">sort(List)</a> 使用归并排序对列表进行排序，它的性能平均情况下的相当于一个高质量的快速排序，保证O(n*logn)的性能(快速排序不能保证)，稳定(快速排序是不稳定的)。稳定排序是不重排相等元素的排序。 </li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#binarySearch-java.util.List-T-" target="_blank" rel="noopener">binarySearch(List, Object)</a> 在有序列表中通过二分查找算法寻找对应元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#reverse-java.util.List-" target="_blank" rel="noopener">reverse(List)</a> 翻转一个列表的元素顺序。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#shuffle-java.util.List-" target="_blank" rel="noopener">shuffle(List)</a> 随机修改列表元素的顺序。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#fill-java.util.List-T-" target="_blank" rel="noopener">fill(List, Object)</a> 用对应的元素覆盖列表中的每一个元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#copy-java.util.List-java.util.List-" target="_blank" rel="noopener">copy(List dest, List src)</a> 拷贝源列表到目标列表。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#min-java.util.Collection-" target="_blank" rel="noopener">min(Collection)</a> 返回集合内最小的元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#max-java.util.Collection-" target="_blank" rel="noopener">max(Collection)</a> 返回集合内最大的元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#rotate-java.util.List-int-" target="_blank" rel="noopener">rotate(List list, int distance)</a> 按指定的距离旋转列表中的所有元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#replaceAll-java.util.List-T-T-" target="_blank" rel="noopener">replaceAll(List list, Object oldVal, Object newVal)</a> 用另一个指定值替换所有出现的值。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#indexOfSubList-java.util.List-java.util.List-" target="_blank" rel="noopener">indexOfSubList(List source, List target)</a> 返回第一个符合子列表的索引下标。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#lastIndexOfSubList-java.util.List-java.util.List-" target="_blank" rel="noopener">lastIndexOfSubList(List source, List target)</a> 返回最后一个符合子列表的索引下标。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#swap-java.util.List-int-int-" target="_blank" rel="noopener">swap(List, int, int)</a> 交换指定列表中指定位置的元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#frequency-java.util.Collection-java.lang.Object-" target="_blank" rel="noopener">frequency(Collection, Object)</a> 计算指定元素在指定集合中出现的次数。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#disjoint-java.util.Collection-java.util.Collection-" target="_blank" rel="noopener">disjoint(Collection, Collection)</a>确定两个集合是否是不相交的，换句话说，它们是否不包含公共元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#addAll-java.util.Collection-T...-" target="_blank" rel="noopener">addAll(Collection&lt;? super T&gt;, T…)</a> 将指定数组中的所有元素添加到指定集合中。</li></ul><h4 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h4><ul><li>Iterators 类似我们熟悉的Enumeration接口，但是更为强大，并且优化了命名<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html" target="_blank" rel="noopener">Iterator</a> 除了包含Enumeration接口的功能之外，还允许用户在具有良好定义的语义层面的集合中移除元素。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html" target="_blank" rel="noopener">ListIterator</a> 列表中使用的迭代器，除了包含迭代器接口的功能外，还支持双向迭代、元素替换、元素插入和索引检索功能。</li></ul></li><li>Ordering<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html" target="_blank" rel="noopener">Comparable</a> 如果要实现自然排序功能你需要实现这个接口，自然排序可用于排序列表或维护排序的集合或映射中的顺序，java中很多类都实现了Comparable接口。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html" target="_blank" rel="noopener">Comparator</a> 表示顺序关系，可用于排序列表或维护排序的集合或映射中的顺序。可以不通过实现Comparable接口的同事重写某个类型的自然排序或对象顺序。</li></ul></li><li>Runtime exceptions<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/UnsupportedOperationException.html" target="_blank" rel="noopener">UnsupportedOperationException</a> 当集合调用某些不支持的操作是会抛出这个异常。</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ConcurrentModificationException.html" target="_blank" rel="noopener">ConcurrentModificationException</a> 当用iterators或list iterators在迭代集合元素的时候集合元素发生意外更改时会抛出此异常，同样的当子列表发生类似的意外更改时也会抛出此异常。</li></ul></li><li>性能<ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/RandomAccess.html" target="_blank" rel="noopener">RandomAccess</a> 这是一个标记接口，代表实现这个接口的List支持快速的(通常为固定时间的)随机访问机制，这个接口往往会改变当前的随机或者是顺序访问集合的某些算法行为来优化效率。</li></ul></li></ul><h4 id="数组工具"><a href="#数组工具" class="headerlink" title="数组工具"></a>数组工具</h4><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html" target="_blank" rel="noopener">Arrays</a> 包含排序、搜索、比较、散列、复制、调整大小、转换为字符串，填充对象数组等静态方法。 </li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Collection Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Collection Framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Collection Framework - Introduction</title>
      <link href="/2018/05/14/Java-Collection-Framework-Introduction/"/>
      <url>/2018/05/14/Java-Collection-Framework-Introduction/</url>
      <content type="html"><![CDATA[<p>Java Collection Framework 是Java类库中最为重要的基础组件之一，主要作用是简化开发者对数据结构操作的难度，并集合了一系列优秀并且常用的数据结构，包括List、Set、Map、Stack、Queue等数据结构和其派生，并且在处理某些场景时优化了部分方法的执行效率，并且随着Java的版本升级更多优秀的方法也会被加入到库中来。</p><p>以下整理的是Collection框架中的接口和类的思维导图：<br><img src="/2018/05/14/Java-Collection-Framework-Introduction/java_collections.jpg" alt="Java Collection"><br>从图中可以看到接口部分主要是抽象了这种集合的规范，而类的部分是一个从Abstract类到最终实体类的演变过程，包括队列(Queue),双向队列(Deque),列表(List),栈(Stack),链表(LinkedList),集合(Set),表(table),地图集(Map),字典集(Dictionary)等等，以及Concurrent包下的适用于多线程的数据结构。</p><p>之后的文章会对Collection框架中的大部分接口和类进行一个解析，包括Api使用、注意事项以及源码的解析。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
          <category> Java Collection Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Java Collection Framework </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
